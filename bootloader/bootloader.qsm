~~ .entry test

~~ ::test

~~ lui r0 sts "ra"
~~ lli r0 sts "m "
~~ st zero(-1) r0
~~ ld r0 zero(-2)
~~ st zero(-2) r0
~~ jrz zero(-8) zero

.entry test

::test

~~ view 'boot' message on 7-segment display
lui r0 sts "bo"
lli r0 sts "ot"
st zero(-1) r0

~~ store vga base address in r0
lui r0 0b0000000100000100
lli r0 0b0000000000000000
~~ set output mode to text
st r0 zero(1)

~~ store vram base address in r0
lui r0 0b0000000100000000
lli r0 0b0000000000000000

~~ set pixel address to 0 (stored in r1)
add r1 zero zero

~~ store max pixel address in r2
li r2 0b100000000000000000

::loop
    ~~ load slide switch states into r4
    ld r4 zero(-2)
    ~~ write slide switch states to leds
    st zero(-2) r4
    ~~ combine pixel address with vram base address
    and r5 r1 zero(0b111111111)
    shl r5 r5 zero(9)
    or r3 r0 r5
    or r3 r3 r1
    ~~ set pixel to slide switch states
    st r3 r4(65)
    ~~ increment pixel address
    add r1 r1 zero(1)
    ~~ subtract pixel address from max pixel address
    sub r3 r2 r1
    ~~ if pixel address is not equal to max pixel address, skip reset and jump to loop
    jrnz zero(rel loop) r3
    ~~ reset pixel address
    add r1 zero zero
~~ jump to loop
jrz zero(rel loop) zero

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

~~ .entry boot

~~ ::boot

~~ ~~ Check if bootloader lives in RAM or BROM
~~ mov r0 rinp
~~ shr r0 21
~~ jrz rel:copyBootloaderToRam r0(-1)

~~ ::mainProgram
~~ ~~ show 'ram' message on 7-segment display
~~ lui rssd sts:"ra"
~~ lli rssd sts:"m "

~~ ~~ Load input mask into r0
~~ li r0 0b1111111111111111

~~ ::mainLoop
~~     ~~ Read input
~~     mov r1 rinp
~~     ~~ Mask input and write result to leds
~~     and rled r1 r0
~~ jpr rel:mainLoop

~~ ::copyBootloaderToRam
~~ ~~ show 'boot' message on 7-segment display
~~ lui rssd sts:"bo"
~~ lli rssd sts:"ot"

~~ mov r0 0
~~ ::copyLoop
~~     ~~ Copy instruction from BROM to RAM
~~     ld rled r0
~~     st r0 rled

~~     ~~ Increment memory pointer
~~     add r0 4
~~     sub r2 r0 bootloaderSize
~~ jrnz rel:copyLoop r2

~~ int 0

~~ ::bootloaderSize
