.entry boot

::boot

~~ Check if bootloader lives in RAM or BROM
mov r0 rinp
shr r0 r0 zero(21)
and r0 r0 zero(1)
jrz zero(rel copyBootloaderToRam) r0

::mainProgram
~~ show 'ram' message on 7-segment display
lui rssd sts "ra"
lli rssd sts "m "

~~ Load input mask into r0
li r0 0b1111111111111111

::mainLoop
    ~~ Read input
    mov r1 rinp
    ~~ Mask input
    and r1 r1 r0
    ~~ Write input to leds
    mov rled r1
jpr zero(rel mainLoop)

::copyBootloaderToRam
~~ show 'boot' message on 7-segment display
lui rssd sts "bo"
lli rssd sts "ot"

mov r0 zero
::copyLoop
    ~~ Copy instruction from BROM to RAM
    ld rled r0
    st r0 rled

    ~~ Wait 2 ** 18 cycles (to show lower 16 bits of copied instruction on the leds)
    lui r1 0b0000000000000011
    lli r1 0b1111111111111111
    dec r1 r1
    jrnz zero(-4) r1

    ~~ Increment instruction pointer
    add r0 r0 zero(4)
    sub r2 r0 zero(bootloaderSize)
jrnz zero(rel copyLoop) r2

int 0

::bootloaderSize
