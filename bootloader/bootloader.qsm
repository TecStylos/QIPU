.entry test

::test

~~~~~~~~~~ INITIAL SETUP ~~~~~~~~~~

~~ view 'boot' message on 7-segment display
lui r0 sts "bo"
lli r0 sts "ot"
st zero(-3) r0

~~ store vga base address in r0
lui r0 0b0000000100000100
lli r0 0b0000000000000000
~~ set output mode to text
st r0 zero(0)

~~~~~~~~~~ RENDERING LOOP ~~~~~~~~~~

~~ r0 -> vram base address
~~ r1 -> x position
~~ r2 -> y position
~~ r3 -> combined vram address
~~ r4 -> pixel data
~~ r5 -> temp pixel address
~~ r6 -> loop-label address

~~ store vram base address in r0
lui r0 0b0000000100000000
lli r0 0b0000000000000000

~~ r1 stores x position
add r1 zero zero

~~ r2 stores y position
add r2 zero zero

~~ store loop-label address in r6
li r6 loop

::loop
    ~~ load pixel data from uart
    ld r4 zero(-1)
    ~~ if no data is available, skip display update
    jlz r6 r4
    ~~ echo received pixel data to uart
    st zero(-1) r4

    ~~ calculate pixel address and store data in vram

    ~~ shift x position 9 bits to the left
    shl r5 r1 zero(9)
    ~~ combine x position with vram base address
    or r3 r0 r5
    ~~ combine y position with current pixel address
    or r3 r3 r2
    ~~ store pixel data in vram
    st r3 r4

    ~~ increment x position
    add r1 r1 zero(1)
    ~~ if x position is equal to 160, reset x position and increment y position
    jnz r6 r1(-160)
    add r1 zero zero
    add r2 r2 zero(1)
    ~~ if y position is equal to 80, reset y position
    jnz r6 r2(-80)
    add r2 zero zero

~~ jump to loop
jz r6 zero

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

~~ .entry boot

~~ ::boot

~~ ~~ Check if bootloader lives in RAM or BROM
~~ mov r0 rinp
~~ shr r0 21
~~ jrz rel:copyBootloaderToRam r0(-1)

~~ ::mainProgram
~~ ~~ show 'ram' message on 7-segment display
~~ lui rssd sts:"ra"
~~ lli rssd sts:"m "

~~ ~~ Load input mask into r0
~~ li r0 0b1111111111111111

~~ ::mainLoop
~~     ~~ Read input
~~     mov r1 rinp
~~     ~~ Mask input and write result to leds
~~     and rled r1 r0
~~ jpr rel:mainLoop

~~ ::copyBootloaderToRam
~~ ~~ show 'boot' message on 7-segment display
~~ lui rssd sts:"bo"
~~ lli rssd sts:"ot"

~~ mov r0 0
~~ ::copyLoop
~~     ~~ Copy instruction from BROM to RAM
~~     ld rled r0
~~     st r0 rled

~~     ~~ Increment memory pointer
~~     add r0 4
~~     sub r2 r0 bootloaderSize
~~ jrnz rel:copyLoop r2

~~ int 0

~~ ::bootloaderSize
